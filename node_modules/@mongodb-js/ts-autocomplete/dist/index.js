"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const ts = __importStar(require("typescript"));
const debug_1 = __importDefault(require("debug"));
const debugLog = (0, debug_1.default)('ts-autocomplete:log');
const debugTrace = (0, debug_1.default)('ts-autocomplete:trace');
const debugError = (0, debug_1.default)('ts-autocomplete:error');
function getVirtualLanguageService() {
    const codeHolder = Object.create(null);
    const versions = Object.create(null);
    const options = {
        target: ts.ScriptTarget.ES2022,
        allowJs: true,
        moduleResolution: ts.ModuleResolutionKind.NodeNext,
        types: ['node'],
        lib: ['es2019'],
        allowImportingTsExtensions: true,
    };
    const updateCode = (newDef) => {
        for (const [key, value] of Object.entries(newDef)) {
            codeHolder[key] = value;
            versions[key] = (versions[key] ?? 0) + 1;
        }
    };
    const listFiles = () => {
        return Object.keys(codeHolder);
    };
    const servicesHost = {
        getScriptFileNames: () => {
            return Object.keys(codeHolder);
        },
        getScriptVersion: (fileName) => {
            return (versions[fileName] ?? 1).toString();
        },
        getScriptSnapshot: (fileName) => {
            if (fileName in codeHolder) {
                return ts.ScriptSnapshot.fromString(codeHolder[fileName]);
            }
            return ts.ScriptSnapshot.fromString(ts.sys.readFile(fileName) || '');
        },
        getCurrentDirectory: () => process.cwd(),
        getCompilationSettings: () => options,
        getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options),
        fileExists: (fileName) => {
            return fileName in codeHolder || ts.sys.fileExists(fileName);
        },
        readFile: (fileName) => {
            if (fileName in codeHolder) {
                return codeHolder[fileName];
            }
            return ts.sys.readFile(fileName);
        },
        readDirectory: (...args) => ts.sys.readDirectory(...args),
        directoryExists: (...args) => ts.sys.directoryExists(...args),
        getDirectories: (...args) => ts.sys.getDirectories(...args),
        log: (...args) => debugLog(args),
        trace: (...args) => debugTrace(args),
        error: (...args) => debugError(args),
    };
    return {
        languageService: ts.createLanguageService(servicesHost, ts.createDocumentRegistry()),
        updateCode,
        listFiles,
    };
}
function compileSourceFile(code) {
    return ts.createSourceFile('_initial_parsing.ts', code, ts.ScriptTarget.Latest, true);
}
function getSymbolAtPosition(sourceFile, position) {
    function findNodeAtPosition(node) {
        if (position >= node.getStart(sourceFile) && position <= node.getEnd()) {
            return ts.forEachChild(node, findNodeAtPosition) || node;
        }
        return undefined;
    }
    let node = findNodeAtPosition(sourceFile);
    while (node && !ts.isIdentifier(node)) {
        if (node.parent) {
            node = node.parent;
        }
        else {
            break;
        }
    }
    return node && ts.isIdentifier(node) ? node.getText(sourceFile) : null;
}
function mapCompletions(filter, prefix, trigger, completions) {
    return completions.entries
        .filter((entry) => filter({ trigger, kind: entry.kind, name: entry.name }))
        .map((entry) => {
        return {
            result: prefix + entry.name,
            name: entry.name,
            kind: entry.kind,
        };
    });
}
function filterDiagnostics(diagnostics) {
    return diagnostics.map((item) => {
        const result = {
            ...lodash_1.default.pick(item.file, 'fileName', 'text'),
            ...lodash_1.default.pick(item, 'messageText'),
        };
        if (result.fileName === '/shell-api.ts') {
            delete result.text;
        }
        return result;
    });
}
class Autocompleter {
    constructor({ filter } = {}) {
        this.filter = filter ?? (() => true);
        ({
            languageService: this.languageService,
            updateCode: this.updateCode,
            listFiles: this.listFiles,
        } = getVirtualLanguageService());
    }
    autocomplete(code) {
        this.updateCode({
            '/main.ts': code,
        });
        const completions = this.languageService.getCompletionsAtPosition('/main.ts', code.length, {
            allowIncompleteCompletions: true,
        });
        if (debugLog.enabled) {
            for (const filename of this.listFiles()) {
                this.debugLanguageService(filename, 'getSyntacticDiagnostics');
                this.debugLanguageService(filename, 'getSemanticDiagnostics');
            }
        }
        if (completions) {
            const tsAst = compileSourceFile(code);
            const symbolAtPosition = getSymbolAtPosition(tsAst, code.length) ?? '';
            const prefix = code.slice(0, code.length - symbolAtPosition.length);
            return mapCompletions(this.filter, prefix, symbolAtPosition, completions);
        }
        return [];
    }
    debugLanguageService(filename, method) {
        try {
            debugLog(method, filename, filterDiagnostics(this.languageService[method](filename)));
        }
        catch (err) {
            debugLog(method, filename, err.stack, err.ProgramFiles);
        }
    }
}
exports.default = Autocompleter;
//# sourceMappingURL=index.js.map